import tensorflow as tf
import numpy as np

celsius = np.array([-40, -10, 0, 8, 15, 22, 38], dtype=float)
fahrenheit = np.array([-40, 14, 32, 46, 59, 72, 100], dtype=float)

capa = tf.keras.layers.Dense(units=1, input_shape=[1])

modelo = tf.keras.Sequential([capa])

# Compilar el modelo con el optimizador Adam y función de pérdida de error cuadrático medio
modelo.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.1),
    loss='mean_squared_error'
)

print("Comenzando entrenamiento del modelo...")
historial = modelo.fit(celsius, fahrenheit, epochs=1000, verbose=False)
print("Modelo entrenado.")

# Mostrar el historial de pérdida durante el entrenamiento
import matplotlib.pyplot as plt

plt.plot(historial.history['loss'])
plt.title('Pérdida durante el entrenamiento')
plt.xlabel('Época')
plt.ylabel('Pérdida')
plt.show()

# Hacer predicciones usando el modelo
print("Haciendo predicciones...")
resultado = modelo.predict([100.0])
print(f"100 grados Celsius son aproximadamente {resultado[0][0]} grados Fahrenheit")

# Mostrar los pesos de la capa
print(f"Pesos internos de la capa: {capa.get_weights()}")
